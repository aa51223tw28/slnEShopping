@model List<prjEShopping.Models.ViewModels.UserShoppingCartVM>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutMain.cshtml";
    //購物車
}


<div class="bg-light">
    <div class="container pt-2">
        <p class="text-primary fs-3 fw-bold">購物車</p>
        <div class="row bg-success rounded py-3 mb-3">
            <div class="col-1">
                @*<input type="checkbox" class="form-check-input">*@
            </div>
            <div class="col-3">
                <span>商品</span>
            </div>
            <div class="col-2">
                <span>單價</span>
            </div>
            <div class="col-2">
                <span>數量</span>
            </div>
            <div class="col-2">
                <span>總計</span>
            </div>
            <div class="col-2">
                <span>操作</span>
            </div>
        </div>


        @{
            //依照賣家ID分組
            var productBySeller = Model.GroupBy(item => item.SellerId);
        }
        @if (!productBySeller.Any())
        {
            <div class="row bg-success rounded mb-3" style="height:300px">
                <div class="d-flex justify-content-center align-items-center">
                    <i class="fs-3 fa-solid fa-cart-arrow-down" style="color: #8da291;"></i>
                    <span class="fs-3 fw-bold text-info">購物車尚無商品，請先去主頁選購</span>
                    <i class="fs-3 fa-solid fa-cart-arrow-down" style="color: #8da291;"></i>
                </div>
            </div>
        }
        else
        {
            foreach (var sellerGroup in productBySeller)
            {
                <div class="row bg-success rounded py-3 mb-3">
                    <div class="row mb-3">
                        <div class="col-1 d-flex align-items-center">
                            <input type="checkbox" class="form-check-input sellercheckbox" data-sellerid="@sellerGroup.FirstOrDefault().SellerId">
                        </div>
                        <div class="col-3 d-flex align-items-center">
                            <span>@sellerGroup.FirstOrDefault().SellerName</span>
                        </div>
                        <div class="col-2 d-flex align-items-center">
                            <button class="btn btn-blue">聊聊</button>
                        </div>
                    </div>
                    @foreach (var item in sellerGroup)
                    {
                        <div class="row">
                            <div class="col-1">
                                <input type="checkbox" class="form-check-input productcheckbox" data-id="@item.ProductId">
                            </div>
                            <div class="col-3">
                                <div class="mb-3" style="max-width: 540px;">
                                    <div class="row g-0">
                                        <div class="col-md-4">
                                            <img src="~/img/@Html.DisplayFor(modelItem => item.ProductImagePathOne)" class="img-fluid rounded-start" alt="...">
                                        </div>
                                        <div class="col-md-8">
                                            <div class="card-body">
                                                <p class="card-text">@item.ProductName</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-2 d-flex align-items-center">
                                <span>@Math.Round(item.Price).ToString("C0")</span>
                            </div>
                            <div class="col-2 d-flex align-items-center">
                                <div class="input-group" style="width: 120px;">
                                    @*加減數量*@
                                    <button class="btn btn-outline-primary minusBtn" type="button" data-id="@item.ProductId" data-qty="@item.Quantity" data-stockqty="@item.ProductStock">-</button>
                                    <input type="text" class="form-control" id="quantityInput" readonly value="@item.Quantity">
                                    <button class="btn btn-outline-primary plusBtn" type="button" data-id="@item.ProductId" data-qty="@item.Quantity" data-stockqty="@item.ProductStock">+</button>
                                </div>
                            </div>
                            <div class="col-2 d-flex align-items-center">
                                @*<span class="text-danger fw-bold">$@string.Format("{0:n0}", Math.Round((decimal)item.SubTotal))</span>*@
                                <span class="text-danger fw-bold">@Math.Round(item.SubTotal).ToString("C0")</span>
                            </div>
                            <div class="col-2 d-flex align-items-center">
                                <button class="btn btn-danger delete2cart" data-id="@item.ProductId">刪除</button>
                                <span hidden data-cartid="@item.CartId" id="cartid"></span>@*為了獲得購物車編號*@
                            </div>
                        </div>
                    }
                </div>
            }
        }






        <!-- 結帳 -->
        <div class="row bg-success rounded py-3">
            <div class="row mb-3">
                <div class="col-1 d-flex align-items-center">
                    <input type="checkbox" class="form-check-input allproductcheckbox">
                </div>
                <div class="col-3 d-flex align-items-center">
                    <span>全選</span>
                </div>

                <div class="col-4 d-flex align-items-center">
                    <span>總金額(</span>
                    <span class="text-danger fw-bold totalItemcheckedCount"></span>
                    <span>項商品)：</span>
                </div>
                <div class="col-2 d-flex align-items-center">
                    <span class="text-danger fw-bold fs-4">NT$</span>
                    <span class="text-danger fw-bold fs-4 totalItemcheckedPrice">0</span>
                </div>
                <div class="col-2 d-flex align-items-center">
                    @*<a id="checkoutLink" href="@Url.Content("~/UserCart/UserCheckout")" class="btn btn-secondary flex-grow-1 btn-lg">去買單</a>*@
                    <a class="btn btn-secondary flex-grow-1 btn-lg" id="checkoutLink">去買單</a>
                </div>
            </div>
        </div>
    </div>
</div>


@*去買單跳出視窗是否有商品*@
<div class="modal" id="checkCartModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                購物車中沒有勾選要買的商品或尚未將商品加入購物車，無法前往結帳。
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="confirmButton">確定</button>
            </div>
        </div>
    </div>
</div>


@*是否要刪除商品*@
<div class="modal" id="deleteCartModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                確定要從購物車刪除此商品嗎？
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="confirmButton2delete">確定</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" id="cancelButton2delete">取消</button>
            </div>
        </div>
    </div>
</div>


@*庫存不足*@
<div class="modal" id="stockCartModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                庫存不足，請選購其他商品。
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="confirmButtonstock">確定</button>
            </div>
        </div>
    </div>
</div>

@*有商品數量庫存不足無法結帳*@
<div class="modal" id="stockCartcheckModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                購物車內『有商品庫存不足』，無法進入結帳，請先刪除商品數量為0商品。
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="confirmButtonstockcheck">確定</button>
            </div>
        </div>
    </div>
</div>



@*有商品數量=0無法結帳*@
<div class="modal" id="quaCartcheckModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                購物車內『有商品數量為0』，無法進入結帳，請先刪除商品數量為0商品。
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="confirmButtonquacheck">確定</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>

        //刪除購物車的商品
        $(document).ready(function () {
            $(".delete2cart").each(function () {
                $(this).on('click', async function () {
                    var self = $(this);
                    var ProductId = self.attr("data-id");
                    //console.log(ProductId)

                    $("#deleteCartModal").modal("show");

                    $("#confirmButton2delete").on('click', async function () {
                        //按下確認才呼叫刪除購物車商品的api
                        const result = await $.get("/UserCart/UserDeleteCartapi?ProductId=" + ProductId)
                        const result2 = await $.get("/UserCart/UserUpadateCartStockapi?ProductId=" + ProductId)
                        // 成功刪除後重新載入頁面
                        location.reload();
                    })

                    $("#cancelButton2delete").on('click', async function () {
                        //不做動作
                    })
                })
            })
        })



        //更新購物車商品數量
        $(document).ready(function () {
            $(".plusBtn").each(function () {
                $(this).on('click', async function () {
                    var self = $(this);

                    var ProductId = self.attr("data-id");
                    var Quantity = parseInt(self.attr("data-qty")) + 1;
                    var Productstock = self.attr("data-stockqty");

                    if (Productstock > 0) {
                        const result = await $.get("/UserCart/UserUpadateCartapi?ProductId=" + ProductId + "&Quantity=" + Quantity)
                        const result2 = await $.get("/UserCart/UserUpadateCartStockapi?ProductId=" + ProductId)
                        location.reload();
                    } else {
                        //alert("庫存不足")
                        $("#stockCartModal").modal("show");
                        $("#confirmButtonstock").on('click', () => {
                            location.reload();
                        })
                    }
                })
            })

            $(".minusBtn").each(function () {
                $(this).on('click', async function () {
                    var self = $(this);

                    var ProductId = self.attr("data-id")

                    var Quantity = parseInt(self.attr("data-qty")) - 1;

                    if (Quantity == 0) {
                        const result = await $.get("/UserCart/UserDeleteCartapi?ProductId=" + ProductId);//Quantity=0呼叫刪除api
                        const result2 = await $.get("/UserCart/UserUpadateCartStockapi?ProductId=" + ProductId)
                        location.reload();
                    } else {
                        const result = await $.get("/UserCart/UserUpadateCartapi?ProductId=" + ProductId + "&Quantity=" + Quantity);
                        const result2 = await $.get("/UserCart/UserUpadateCartStockapi?ProductId=" + ProductId)
                        location.reload();
                    }
                })
            })
        })


        //按下去買單要在檢核一次現在的訂單量
        $(document).ready(function () {
            $("#checkoutLink").each(function () {
                $(this).on('click', async function () {

                    const totalPrice = parseFloat(totalItemcheckedPrice.textContent.replace(",", "")); // 移除千分位符號並轉換為數字

                    if (totalPrice == 0) {
                        $("#checkCartModal").modal("show");

                    } else {

                        var cartid = document.querySelector("#cartid").getAttribute("data-cartid");
                        //確定庫存的api,若不夠買要將ProductStocks的PurchaseQuantity=0,ShoppingCartDetails的Quantity=0
                        //確定購物車所選取的商品數量不為0才可以去買單
                        const result = await $.get("/UserCart/UserCartCheckStockapi?cartid=" + cartid)

                        if (result === "success") {
                            window.location.href = "/UserCart/UserCheckout";
                        }
                        else if (result === "stock_insufficient")//庫存不夠
                        {
                            $("#stockCartcheckModal").modal("show");
                            $("#confirmButtonstockcheck").on('click', function () {
                                location.reload();
                            });
                        }
                        else if (result === "quantity_zero")//購物車中商品有數量為0
                        {
                            $("#quaCartcheckModal").modal("show");
                            $("#confirmButtonquacheck").on('click', function () {
                                location.reload();
                            });
                        }
                    }
                })
            })
        })



        //勾選
        const sellerCheckboxes = document.querySelectorAll(".sellercheckbox");    
        const productCheckboxes = document.querySelectorAll(".productcheckbox");
        const allproductcheckbox = document.querySelector(".allproductcheckbox");

        //勾選全部
        allproductcheckbox.addEventListener('change', async function () {
            
            sellerCheckboxes.forEach(sellerCheckbox => {
                sellerCheckbox.checked = this.checked
            })

            productCheckboxes.forEach(productCheckbox => {
                productCheckbox.checked = this.checked
            })
            
            const result = await $.get("/UserCart/checkedBuyAllProductsapi");//全選 編輯ShoppingCartDetails的AddToOrder=1
            getTotalcheckedCount();
            getTotalcheckedPrice();
        })

        //勾選商家其商品也被勾選
        sellerCheckboxes.forEach(sellertCheckbox => {
            sellertCheckbox.addEventListener('change', async function () {
                const productGroup = this.closest('.row.bg-success.rounded.py-3.mb-3') 
                const productCheckboxes = productGroup.querySelectorAll('.productcheckbox');

                productCheckboxes.forEach(productCheckbox => {
                    productCheckbox.checked = this.checked;                   
                })

                var sellerId = $(this).attr("data-sellerid");
                //console.log(sellerId)
                const result = await $.get("/UserCart/checkedBuyOneSellerapi?sellerId=" + sellerId);//勾選整家店要去尋覽每件商品
                getTotalcheckedCount();
                getTotalcheckedPrice();

                // 檢查是否有商家沒有勾選，如果有，取消全選的勾選
                const isAnySellerUnchecked = Array.from(sellerCheckboxes).some(sellerCheckbox => !sellerCheckbox.checked)//true(有->沒有勾選)
                allproductcheckbox.checked = !isAnySellerUnchecked;//false(取消全選)

            })
        })

        //勾選商品
        productCheckboxes.forEach(productCheckbox => {
            productCheckbox.addEventListener('change', async function () {
                var productId = $(this).attr("data-id");
                //console.log(productId)
                const result = await $.get("/UserCart/checkedBuyOneProductapi?productId=" + productId);//單勾選商品編輯ShoppingCartDetails的AddToOrder=1

                 // 檢查是否有商品沒有勾選，如果有，取消全選的勾選
                const isAnyProductUnchecked = Array.from(productCheckboxes).some(productCheckbox => !productCheckbox.checked)
                allproductcheckbox.checked = !isAnyProductUnchecked;

                getTotalcheckedCount();
                getTotalcheckedPrice();

                //獲取商品所屬的商家勾選框
                const sellerCheckbox = this.closest('.row.bg-success.rounded.py-3.mb-3').querySelector('.sellercheckbox');

                //檢查商家下的所有商品是否有未選中的
                const productGroup = this.closest('.row.bg-success.rounded.py-3.mb-3');
                const productCheckboxesInGroup = productGroup.querySelectorAll('.productcheckbox');
                const isAllProductsUnchecked = Array.from(productCheckboxesInGroup).some(productCheckbox => !productCheckbox.checked);
                sellerCheckbox.checked = !isAllProductsUnchecked;
            })
        })


        //呼叫選取商品數量api
        const totalItemcheckedCount = document.querySelectorAll('.totalItemcheckedCount')
        const totalItemcheckedPrice = document.querySelector('.totalItemcheckedPrice')

        async function getTotalcheckedCount() {
            const response = await fetch('/UserCart/GetTotalcheckedCount');

            const num = await response.json();
            totalItemcheckedCount.forEach(element => {
                element.textContent = num;
            });
        }

        async function getTotalcheckedPrice() {
            const response = await fetch('/UserCart/GetTotalcheckedPrice');
            const price = await response.json();
            
            const formattedPrice = price.toLocaleString();

            totalItemcheckedPrice.textContent = formattedPrice;
        }

        getTotalcheckedCount();
        getTotalcheckedPrice();
    </script>
}

